{"meta":{"title":"nicking's home","subtitle":"","description":"","author":"nicking","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2020-04-27T09:12:28.359Z","updated":"2020-04-27T09:12:28.359Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-04-27T09:12:28.360Z","updated":"2020-04-27T09:12:28.360Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-27T09:12:28.361Z","updated":"2020-04-27T09:12:28.361Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-04-27T09:12:28.360Z","updated":"2020-04-27T09:12:28.360Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-04-27T09:12:28.361Z","updated":"2020-04-27T09:12:28.361Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-27T09:12:28.362Z","updated":"2020-04-27T09:12:28.362Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"vue使用.sync双向绑定","slug":"vuesync","date":"2020-04-27T10:45:20.674Z","updated":"2020-04-27T10:48:09.601Z","comments":true,"path":"2020/04/27/vuesync/","link":"","permalink":"http://yoursite.com/2020/04/27/vuesync/","excerpt":"","text":"流下了没有技术的泪水，这个问题搞了我一个多小时，自己太菜了，努力学习啊~所以在我解决过后我觉得有必要写一篇简短的博客来描述这一段心酸往事，come to the point：首先我们要明确自己有什么需求，就是子组件和父组件的通信，子组件修改值过后通知父组件，父组件修改过后传递给子组件，okay，建立两个组件一个是父组件（parent.vue），一个子组件（child.vue），既然要引用子组件，那么我们应该先写一个子组件但是在这之前有必要先看一下效果：我们在父组件中输入，就会将111传递到自组件，在子组件中输入就会传递到父组件，这样就实现了双向绑定啦child.vue代码如下： 123456789101112131415161718192021222324252627282930313233&lt;template&gt; &lt;div&gt; &lt;el-input v-model&#x3D;&quot;childInput&quot;&gt;&lt;&#x2F;el-input&gt; 父组件传递的值： &#123;&#123;fatherInput&#125;&#125; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt; export default &#123; props: &#123; fatherInput: &#123; type: String, default: function () &#123; return null &#125; &#125; &#125;, data() &#123; return &#123; childInput: &#39;&#39; &#125; &#125;, watch: &#123; fatherInput: function () &#123; &#x2F;&#x2F; 监听父组件传递过来的值 if (this.fatherInput !&#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 如果父组件传递了值，我们就把值赋给子组件的输入框 this.childInput &#x3D; this.fatherInput &#125; &#125;, childInput: function () &#123; &#x2F;&#x2F; 监听子组件的输入框的值，随时传递给父组件 this.$emit(&#39;update:fatherInput&#39;, this.childInput); &#x2F;&#x2F; 将子组件的输入框的值传递给父组件 父组件需要用.sync &#125; &#125; &#125;&lt;&#x2F;script&gt; parent.vue代码如下： 12345678910111213141516171819202122&lt;template&gt; &lt;div&gt; 父组件输入框：&lt;el-input v-model&#x3D;&quot;inputValue&quot;&gt;&lt;&#x2F;el-input&gt; 父组件值：&#123;&#123;inputValue&#125;&#125; &lt;hr&#x2F;&gt; 引用子组件： &lt;child :fatherInput.sync&#x3D;&quot;inputValue&quot;&gt;&lt;&#x2F;child&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt; import child from &#39;.&#x2F;child&#39; export default &#123; components: &#123; child &#125;, data() &#123; return &#123; inputValue: &#39;&#39; &#125; &#125; &#125;&lt;&#x2F;script&gt; 我觉得这个要充分运用到监听器，监听值的变化，并做出相应的操作","categories":[],"tags":[]},{"title":"简介","slug":"hello-world","date":"2020-04-27T08:28:04.650Z","updated":"2020-04-27T10:45:15.226Z","comments":true,"path":"2020/04/27/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/27/hello-world/","excerpt":"","text":"今后我将在这里发表一些生活、工作、学习、读书、爱情等一系列文章，敬请关注！！！","categories":[],"tags":[]}],"categories":[],"tags":[]}